{"version":3,"sources":["logo.svg","components/map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Map","props","state","colors","Array","fill","this","highlight","forEach","id","geographies","geography","map","geo","key","rsmKey","class","stroke","parseInt","onMouseOver","updateMouseOverState","onMouseLeave","className","projection","Component","App","weatherData","highlightedStates","mouseOverState","bind","temp","skiesAreClear","stateCoordinates","items","fetch","latitude","longitude","then","response","json","main","clouds","all","setState","concat","val","nothing","console","log","catch","error","href","style","margin","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.44da23e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport ReactDOM from \"react-dom\";\nimport { Graticule, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\n\nimport '../App.css';\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\n// State coordinates\n// https://www.latlong.net/category/states-236-14.html\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  render() {\n\n    var colors = new Array(57);\n    colors.fill(\"#DDD\");\n\n    this.props.highlight.forEach(id => colors[id] = \"#AEA\");\n\n    var geographies = (\n      <Geographies geography={geoUrl}>\n      {({ geographies }) =>\n      geographies.map(geo =>\n        <Geography\n        key={geo.rsmKey}\n        class=\"stateSVG\"\n        stroke=\"#BFBFBF\"\n        geography={geo}\n        fill={colors[parseInt(geo.id)]}\n        onMouseOver={() => this.props.updateMouseOverState(geo.id)}\n        onMouseLeave={() => this.props.updateMouseOverState(null)}\n        />)\n      }\n      </Geographies>\n    );\n\n    return (\n      <div>\n        <div className=\"map\">\n          <ComposableMap projection=\"geoAlbersUsa\">\n          {geographies}\n          </ComposableMap>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Map from './components/map.js';\n\nimport stateCoordinates from './data/stateCoordinates.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherData: [],\n      highlightedStates: [null],\n      mouseOverState: null\n    };\n\n    this.updateMouseOverState = this.updateMouseOverState.bind(this);\n  }\n\n  componentDidMount() {\n    var temp;\n    var skiesAreClear;\n    stateCoordinates.items.forEach(state => {\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${state.latitude}&lon=${state.longitude}&appid=1e8fc8de2dcb07edbb832f5aec609e1a`)\n      .then(response => response.json())\n      .then(response => {\n        temp = parseInt((response.main.temp - 273.15) * 9 / 5 + 32);\n        skiesAreClear = (response.clouds.all < 30);\n        this.setState({\n          weatherData: this.state.weatherData.concat({id: state.val, temp: temp, clouds: response.clouds.all})\n        });\n        if (temp >= 70 && temp < 80 && skiesAreClear)\n          this.setState({\n            highlightedStates: this.state.highlightedStates.concat(state.val)\n          });\n      })\n      .then(nothing => console.log(this.state.weatherData))\n      .catch(error => console.error(error));\n    });\n  }\n\n  updateMouseOverState(id) {\n    this.state.weatherData.forEach(state => {\n      if (state.id == id) {\n        this.setState({mouseOverState: state});\n      } else if (id == null) {\n        this.setState({mouseOverState: null});\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"text\">\n          <h1>The Good Weather Map</h1>\n          <p>A map of the US that shows which states are currently\n          in the 70's with clear skies.<br/><br/>\n          The Good Weather Map uses the <a href=\"https://openweathermap.org/\">\n          OpenWeather API</a> to find what states are nice right now, and highlights them\n          them using <a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a>.</p>\n          {this.state.highlightedStates[0] == null && this.state.mouseOverState == null &&\n            <p style={{margin: \"0px\", fontSize: \"1rem\"}}>\n            Looks like there's no decent weather anywhere. <br/>\n            Come back later, maybe Texas will light up or something.\n            </p>\n          }\n          {this.state.mouseOverState != null &&\n            <p style={{margin: \"0px\", fontSize: \"1rem\"}}>\n            Temperature: {this.state.mouseOverState.temp}Â°F <br/>\n            Cloud Cover: {this.state.mouseOverState.clouds}%\n            </p>\n          }\n        </div>\n        <Map highlight={this.state.highlightedStates} updateMouseOverState={this.updateMouseOverState}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}